using System;using UnityEngine;using UnityEngine.Serialization;using UnityEngine.UI;public class PlayerController : MonoBehaviour{    public Transform groundCheck;    public Rigidbody rb;    public KeyCode sprintKey = KeyCode.LeftShift;    public Slider hungerStaminaBar;    [SerializeField] private float walkSpeed = 5f;    [SerializeField] private float sprintSpeed = 10f;    [SerializeField] private LayerMask layerMask;    [SerializeField] private float jumpForce = 5f;    [SerializeField] private float staminaConsumption = 10f;    [SerializeField] private float totalStamina = 100f;    [SerializeField] private float currentStamina;     [SerializeField] private float constStaminaDrain = 1f;    private bool isMoving = false;    private float defaultWalkSpeed;    private void Start()    {                currentStamina = totalStamina;        defaultWalkSpeed = walkSpeed;                        if (hungerStaminaBar != null)        {            hungerStaminaBar.value = 1.0f;        }    }    private void OnValidate()    {        if (rb == null)        {            rb = GetComponent<Rigidbody>();        }    }    private void OnTriggerEnter(Collider other)    {        if (other.gameObject.CompareTag("Hunger"))        {            Debug.Log("Food item collected");            RestoreStamina(20f);            Destroy(other.gameObject);        }        if (other.gameObject.CompareTag("Win"))        {            Debug.Log("You win");        }    }    // Update is called once per frame    void Update()    {                CheckMovementInput();                        PlayerMovements();                        PlayerSprint();                         StaminaConstantDrain();         if (Input.GetKeyDown(KeyCode.R))         {             TryUseTimeIncreaser();         }    }    private void FixedUpdate()    {        Jump();    }    bool GroundCheck()    {        if (Physics.Raycast(groundCheck.position, Vector3.down, 0.3f, layerMask))        {            return true;        }        return false;    }    private void TryUseTimeIncreaser()    {        var timeItem =            InventoryManager.instance.inventory.Find(item => item.inventoryItems == InventoryItems.timeIncreaser);        if (timeItem != null && timeItem.itemQuantity > 0)        {            bool used = TicksSystem.instance.TryUseTimeIncreaser(10f);            if (used)            {                timeItem.itemQuantity--;                InventoryManager.instance.UpdateInventoryUI(); // âœ… update the text UI                Debug.Log("Used a Time Increaser!");            }            else            {                Debug.Log("Time is full. Cannot use Time Increaser now.");            }        }        else        {            Debug.Log("No Time Increaser in inventory.");        }    }    void CheckMovementInput()    {                isMoving = Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.A) ||                    Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.D);    }    void PlayerMovements()    {         if (Input.GetKey(KeyCode.A))        {            transform.Translate(-transform.right * Time.deltaTime * walkSpeed);        }        if (Input.GetKey(KeyCode.D))        {            transform.Translate(transform.right * Time.deltaTime * walkSpeed);        }        if (Input.GetKey(KeyCode.W))        {            transform.Translate(transform.forward * Time.deltaTime * walkSpeed);        }        if (Input.GetKey(KeyCode.S))        {            transform.Translate(-transform.forward * Time.deltaTime * walkSpeed);        }    }    void Jump()    {        if (Input.GetKeyDown(KeyCode.Space) && GroundCheck())        {            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);            }    }    void PlayerSprint()    {                if (Input.GetKey(sprintKey) && GroundCheck() && isMoving && currentStamina > 0)        {            walkSpeed = sprintSpeed;                                    currentStamina -= staminaConsumption * Time.deltaTime;            currentStamina = Mathf.Clamp(currentStamina, 0, totalStamina);                                    UpdateStaminaBar();        }        else        {            walkSpeed = defaultWalkSpeed;                                    if (currentStamina <= 0)            {                GameOver();            }        }    }    void UpdateStaminaBar()    {        if (hungerStaminaBar != null)        {            hungerStaminaBar.value = currentStamina / totalStamina;        }    }    void StaminaConstantDrain()    {                currentStamina -= constStaminaDrain * Time.deltaTime;        currentStamina = Mathf.Clamp(currentStamina, 0, totalStamina);        UpdateStaminaBar();                if (currentStamina <= 0)        {            GameOver();        }    }    void GameOver()    {        if (GameManager.instance != null)        {            GameManager.instance.GameOver();        }        else        {            Debug.Log("This is not present");        }    }    public void RestoreStamina(float amount)    {        currentStamina += amount;        currentStamina = Mathf.Clamp(currentStamina, 0, totalStamina);        UpdateStaminaBar();    }    public void HideSlider()    {        if (GameManager.instance != null && GameManager.instance.isGameOver)        {            hungerStaminaBar.enabled = false;            hungerStaminaBar.gameObject.SetActive(false);        }    }    private void OnDrawGizmos()    {        if (groundCheck != null)        {            Gizmos.color = Color.red;            Gizmos.DrawRay(groundCheck.position, Vector3.down * 0.3f);        }    }}